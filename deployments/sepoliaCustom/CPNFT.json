{
  "address": "0xEa81A317a4Bc82084359028A207e282F8F503d16",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseTokenURI_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "from",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x728194607100177c5067e96779b8d16b177a8254c8f536643329158273b542e8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xa3B605fB633AD0A0DC4B74b10bBfc40fDB050d35",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "2062241",
    "logsBloom": "0x
    "blockHash": "0x40b4276254cac85d100654d44d5f882cf95081a56a06b1a26ce923249cc002b9",
    "transactionHash": "0x728194607100177c5067e96779b8d16b177a8254c8f536643329158273b542e8",
    "logs": [],
    "blockNumber": 9116219,
    "cumulativeGasUsed": "2263520",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CPOP NFT Collection",
    "CPNFT",
    "https://api.cpop.io/nft/"
  ],
  "numDeployments": 1,
  "solcInputHash": "9c47388c540bea2fa2f0cd3515eb0437",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Custom implementation of NFT with batch operations and owner privilegesCompletely independent of OpenZeppelin libraries to minimize gas costs\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID\",\"params\":{\"to\":\"The address to approve for token transfer\",\"tokenId\":\"The token ID to approve\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in an owner's account\",\"params\":{\"owner_\":\"The address to query the balance of\"}},\"batchBurn(uint256[])\":{\"details\":\"Burn NFTs in batch\",\"params\":{\"tokenIds\":\"Array of token IDs to be burned\"}},\"batchMint(address[])\":{\"details\":\"Mint NFTs in batch to multiple addresses\",\"params\":{\"to\":\"Array of addresses to receive the minted NFTs\"}},\"batchTransferFrom(address[],address[],uint256[])\":{\"details\":\"Transfer NFTs in batch from multiple owners to multiple recipients\",\"params\":{\"from\":\"Array of current token owners\",\"to\":\"Array of new token owners\",\"tokenIds\":\"Array of token IDs to be transferred\"}},\"burn(uint256)\":{\"details\":\"Burn a single NFT\",\"params\":{\"tokenId\":\"ID of the token to be burned\"}},\"constructor\":{\"details\":\"Constructor function\",\"params\":{\"baseTokenURI_\":\"Base URI for token metadata\",\"name_\":\"Name of the NFT collection\",\"symbol_\":\"Symbol of the NFT collection\"}},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID\",\"params\":{\"tokenId\":\"The token ID to query\"}},\"getCurrentTokenId()\":{\"details\":\"Get the current token ID counter value\",\"returns\":{\"_0\":\"Current token ID count\"}},\"getNextTokenId()\":{\"details\":\"Get the next token ID that will be minted\",\"returns\":{\"_0\":\"Next token ID\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Checks if an operator is approved by an owner\",\"params\":{\"operator\":\"The operator address\",\"owner_\":\"The owner address\"}},\"mint(address)\":{\"details\":\"Mint a single NFT to an address\",\"params\":{\"to\":\"Address to receive the minted NFT\"},\"returns\":{\"_0\":\"tokenId The ID of the minted token\"}},\"name()\":{\"details\":\"Returns the name of the token\"},\"owner()\":{\"details\":\"Returns the address of the current owner\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of a token\",\"params\":{\"tokenId\":\"The token ID to query\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers a token from one address to another\",\"params\":{\"from\":\"The current owner of the token\",\"to\":\"The address to receive the token\",\"tokenId\":\"The token ID to transfer\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers a token from one address to another with additional data\",\"params\":{\"_data\":\"Additional data to send with the transfer\",\"from\":\"The current owner of the token\",\"to\":\"The address to receive the token\",\"tokenId\":\"The token ID to transfer\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator\",\"params\":{\"approved\":\"Boolean representing the status of the approval to be set\",\"operator\":\"The address to set the approval for\"}},\"setBaseURI(string)\":{\"details\":\"Set the base URI for token metadata\",\"params\":{\"baseURI\":\"New base URI\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token\"},\"tokenExists(uint256)\":{\"details\":\"Check if a token exists\",\"params\":{\"tokenId\":\"ID of the token to check\"},\"returns\":{\"_0\":\"Boolean indicating if the token exists\"}},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for a token\",\"params\":{\"tokenId\":\"The token ID to query\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers a token from one address to another\",\"params\":{\"from\":\"The current owner of the token\",\"to\":\"The address to receive the token\",\"tokenId\":\"The token ID to transfer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account\",\"params\":{\"newOwner\":\"The address to transfer ownership to\"}}},\"title\":\"Gas-Optimized CPNFT Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/cpop/CPNFT.sol\":\"CPNFT\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/cpop/CPNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title Gas-Optimized CPNFT Contract\\n * @dev Custom implementation of NFT with batch operations and owner privileges\\n * @dev Completely independent of OpenZeppelin libraries to minimize gas costs\\n */\\ncontract CPNFT {\\n    // Token name\\n    string private _name;\\n    \\n    // Token symbol\\n    string private _symbol;\\n    \\n    // Base URI for token metadata\\n    string private _baseTokenURI;\\n    \\n    // Token ID counter\\n    uint256 private _tokenIdCounter;\\n    \\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n    \\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n    \\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n    \\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n    \\n    // Contract owner\\n    address private _owner;\\n    \\n    // Mapping to track minted tokens\\n    mapping(uint256 => bool) private _mintedTokens;\\n\\n    // Events\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Constructor function\\n     * @param name_ Name of the NFT collection\\n     * @param symbol_ Symbol of the NFT collection\\n     * @param baseTokenURI_ Base URI for token metadata\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory baseTokenURI_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _baseTokenURI = baseTokenURI_;\\n        _owner = msg.sender;\\n        _tokenIdCounter = 1; // Start token IDs from 1\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account\\n     * @param newOwner The address to transfer ownership to\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"New owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for a token\\n     * @param tokenId The token ID to query\\n     */\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\n        require(_mintedTokens[tokenId], \\\"Token does not exist\\\");\\n        return string(abi.encodePacked(_baseTokenURI, _toString(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Set the base URI for token metadata\\n     * @param baseURI New base URI\\n     */\\n    function setBaseURI(string memory baseURI) external onlyOwner {\\n        _baseTokenURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev Returns the number of tokens in an owner's account\\n     * @param owner_ The address to query the balance of\\n     */\\n    function balanceOf(address owner_) public view returns (uint256) {\\n        require(owner_ != address(0), \\\"Balance query for the zero address\\\");\\n        return _balances[owner_];\\n    }\\n\\n    /**\\n     * @dev Returns the owner of a token\\n     * @param tokenId The token ID to query\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        address owner_ = _owners[tokenId];\\n        require(owner_ != address(0), \\\"Owner query for nonexistent token\\\");\\n        return owner_;\\n    }\\n\\n    /**\\n     * @dev Check if a token exists\\n     * @param tokenId ID of the token to check\\n     * @return Boolean indicating if the token exists\\n     */\\n    function tokenExists(uint256 tokenId) public view returns (bool) {\\n        return _mintedTokens[tokenId];\\n    }\\n\\n    /**\\n     * @dev Approves another address to transfer the given token ID\\n     * @param to The address to approve for token transfer\\n     * @param tokenId The token ID to approve\\n     */\\n    function approve(address to, uint256 tokenId) public {\\n        address owner_ = ownerOf(tokenId);\\n        require(to != owner_, \\\"Approval to current owner\\\");\\n        require(msg.sender == owner_ || isApprovedForAll(owner_, msg.sender), \\n                \\\"Approve caller is not owner nor approved for all\\\");\\n        \\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner_, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Gets the approved address for a token ID\\n     * @param tokenId The token ID to query\\n     */\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        require(_mintedTokens[tokenId], \\\"Approved query for nonexistent token\\\");\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Sets or unsets the approval of a given operator\\n     * @param operator The address to set the approval for\\n     * @param approved Boolean representing the status of the approval to be set\\n     */\\n    function setApprovalForAll(address operator, bool approved) public {\\n        require(operator != msg.sender, \\\"Approve to caller\\\");\\n        \\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Checks if an operator is approved by an owner\\n     * @param owner_ The owner address\\n     * @param operator The operator address\\n     */\\n    function isApprovedForAll(address owner_, address operator) public view returns (bool) {\\n        return _operatorApprovals[owner_][operator];\\n    }\\n\\n    /**\\n     * @dev Transfers a token from one address to another\\n     * @param from The current owner of the token\\n     * @param to The address to receive the token\\n     * @param tokenId The token ID to transfer\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"Transfer caller is not owner nor approved\\\");\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Safely transfers a token from one address to another\\n     * @param from The current owner of the token\\n     * @param to The address to receive the token\\n     * @param tokenId The token ID to transfer\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely transfers a token from one address to another with additional data\\n     * @param from The current owner of the token\\n     * @param to The address to receive the token\\n     * @param tokenId The token ID to transfer\\n     * @param _data Additional data to send with the transfer\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"Transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Mint NFTs in batch to multiple addresses\\n     * @param to Array of addresses to receive the minted NFTs\\n     */\\n    function batchMint(address[] calldata to) external onlyOwner() {\\n        for (uint256 i = 0; i < to.length; i++) {\\n            mint(to[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint a single NFT to an address\\n     * @param to Address to receive the minted NFT\\n     * @return tokenId The ID of the minted token\\n     */\\n    function mint(address to) public onlyOwner returns (uint256) {\\n        require(to != address(0), \\\"Mint to the zero address\\\");\\n        \\n        uint256 tokenId = _tokenIdCounter;\\n        _tokenIdCounter++;\\n        \\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n        _mintedTokens[tokenId] = true;\\n        \\n        emit Transfer(address(0), to, tokenId);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev Burn NFTs in batch\\n     * @param tokenIds Array of token IDs to be burned\\n     */\\n    function batchBurn(uint256[] calldata tokenIds) external onlyOwner {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            burn(tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Burn a single NFT\\n     * @param tokenId ID of the token to be burned\\n     */\\n    function burn(uint256 tokenId) public onlyOwner {\\n        require(_mintedTokens[tokenId], \\\"Token does not exist\\\");\\n        \\n        address owner_ = ownerOf(tokenId);\\n        \\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n        \\n        _balances[owner_] -= 1;\\n        delete _owners[tokenId];\\n        _mintedTokens[tokenId] = false;\\n        \\n        emit Transfer(owner_, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfer NFTs in batch from multiple owners to multiple recipients\\n     * @param from Array of current token owners\\n     * @param to Array of new token owners\\n     * @param tokenIds Array of token IDs to be transferred\\n     */\\n    function batchTransferFrom(\\n        address[] calldata from,\\n        address[] calldata to,\\n        uint256[] calldata tokenIds\\n    ) external onlyOwner {\\n        require(\\n            from.length == to.length && to.length == tokenIds.length,\\n            \\\"Arrays length mismatch\\\"\\n        );\\n        \\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            transferFrom(from[i], to[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the current token ID counter value\\n     * @return Current token ID count\\n     */\\n    function getCurrentTokenId() external view returns (uint256) {\\n        return _tokenIdCounter - 1;\\n    }\\n\\n    /**\\n     * @dev Get the next token ID that will be minted\\n     * @return Next token ID\\n     */\\n    function getNextTokenId() external view returns (uint256) {\\n        return _tokenIdCounter;\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer a token\\n     * @param from The current owner of the token\\n     * @param to The address to receive the token\\n     * @param tokenId The token ID to transfer\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        require(ownerOf(tokenId) == from, \\\"Transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"Transfer to the zero address\\\");\\n        \\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n        \\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n        \\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to safely transfer a token\\n     * @param from The current owner of the token\\n     * @param to The address to receive the token\\n     * @param tokenId The token ID to transfer\\n     * @param _data Additional data to send with the transfer\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal {\\n        _transfer(from, to, tokenId);\\n        // Simplified version - in a production environment, you might want to check if the recipient is a contract\\n        // and can handle ERC721 tokens, but we're omitting that to save gas\\n    }\\n\\n    /**\\n     * @dev Internal function to approve an address for a token\\n     * @param to The address to approve\\n     * @param tokenId The token ID to approve\\n     */\\n    function _approve(address to, uint256 tokenId) internal {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to check if an address is approved or owner of a token\\n     * @param spender The address to check\\n     * @param tokenId The token ID to check\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n        require(_mintedTokens[tokenId], \\\"Operator query for nonexistent token\\\");\\n        \\n        // Special operators can always transfer\\n        if (spender == _owner) {\\n            return true;\\n        }\\n        \\n        address owner_ = ownerOf(tokenId);\\n        return (spender == owner_ || getApproved(tokenId) == spender || isApprovedForAll(owner_, spender));\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string representation\\n     * @param value The uint256 value to convert\\n     */\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(add(buffer, 0x20), length)\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), \\\"0123456789abcdef\\\"))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x524928efbedd9dcedfc35af5e3df7702799a06095a099a9dfebd62e59f89938e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523461047f576126f78038038061001981610483565b928339810160608282031261047f5781516001600160401b03811161047f57816100449184016104a8565b60208301519092906001600160401b03811161047f57826100669183016104a8565b60408201519092906001600160401b03811161047f5761008692016104a8565b82516001600160401b0381116102ba575f54600181811c91168015610475575b602082101461029c57601f8111610413575b506020601f82116001146103b257819293945f926103a7575b50508160011b915f199060031b1c1916175f555b81516001600160401b0381116102ba57600154600181811c9116801561039d575b602082101461029c57601f811161033a575b50602092601f82116001146102d957928192935f926102ce575b50508160011b915f199060031b1c1916176001555b80516001600160401b0381116102ba57600254600181811c911680156102b0575b602082101461029c57601f8111610239575b50602091601f82116001146101d9579181925f926101ce575b50508160011b915f199060031b1c1916176002555b600880546001600160a01b0319163317905560016003556040516121fd90816104fa8239f35b015190505f80610193565b601f1982169260025f52805f20915f5b85811061022157508360019510610209575b505050811b016002556101a8565b01515f1960f88460031b161c191690555f80806101fb565b919260206001819286850151815501940192016101e9565b60025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace601f830160051c81019160208410610292575b601f0160051c01905b818110610287575061017a565b5f815560010161027a565b9091508190610271565b634e487b7160e01b5f52602260045260245ffd5b90607f1690610168565b634e487b7160e01b5f52604160045260245ffd5b015190505f80610132565b601f1982169360015f52805f20915f5b868110610322575083600195961061030a575b505050811b01600155610147565b01515f1960f88460031b161c191690555f80806102fc565b919260206001819286850151815501940192016102e9565b60015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f830160051c81019160208410610393575b601f0160051c01905b8181106103885750610118565b5f815560010161037b565b9091508190610372565b90607f1690610106565b015190505f806100d1565b601f198216905f8052805f20915f5b8181106103fb575095836001959697106103e3575b505050811b015f556100e5565b01515f1960f88460031b161c191690555f80806103d6565b9192602060018192868b0151815501940192016103c1565b5f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563601f830160051c8101916020841061046b575b601f0160051c01905b81811061046057506100b8565b5f8155600101610453565b909150819061044a565b90607f16906100a6565b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176102ba57604052565b81601f8201121561047f578051906001600160401b0382116102ba576104d7601f8301601f1916602001610483565b928284526020838301011161047f57815f9260208093018386015e830101529056fe6080806040526004361015610012575f80fd5b5f3560e01c908162923f9e146118b55750806306fdde03146117f5578063081812fc146117b9578063095ea7b3146115d357806323b872dd146115b457806342842e0e1461158557806342966c681461142a57806355f804b3146111a2578063561892361461113c5780636352211e146110e25780636a62784214610f9b57806370a0823114610eae5780638da5cb5b14610e5d57806395d89b4114610d57578063a22cb46514610c27578063b818f9e414610ab1578063b88d4fde14610a1f578063c87b56dd146106df578063caa0f92a146106a4578063d67b06c1146104a8578063dc8e92ea146102c0578063e985e9c51461022f5763f2fde38b14610118575f80fd5b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5761014f611946565b6008549073ffffffffffffffffffffffffffffffffffffffff80831691610177338414611c79565b169182156101cd57827fffffffffffffffffffffffff0000000000000000000000000000000000000000927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a31617600855005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6577206f776e657220697320746865207a65726f20616464726573730000006044820152fd5b5f80fd5b3461022b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57610266611946565b73ffffffffffffffffffffffffffffffffffffffff610283611969565b91165f52600760205273ffffffffffffffffffffffffffffffffffffffff60405f2091165f52602052602060ff60405f2054166040519015158152f35b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5760043567ffffffffffffffff811161022b5761030f903690600401611aaf565b61033273ffffffffffffffffffffffffffffffffffffffff600854163314611c79565b5f5b81811061033d57005b610348818385611df2565b359061036d3373ffffffffffffffffffffffffffffffffffffffff6008541614611c79565b815f52600960205261038560ff60405f205416611cde565b73ffffffffffffffffffffffffffffffffffffffff6103a383611d43565b6103ac8461214f565b1691825f52600560205260405f208054937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850194851161047b576001945f92558282526004602052604082207fffffffffffffffffffffffff000000000000000000000000000000000000000081541690558282526009602052604082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a401610334565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5760043567ffffffffffffffff811161022b576104f7903690600401611aaf565b61051a73ffffffffffffffffffffffffffffffffffffffff600854163314611c79565b5f5b81811061052557005b73ffffffffffffffffffffffffffffffffffffffff61054d610548838587611df2565b611e2f565b61055c33836008541614611c79565b16908115610646576003547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461047b5760018101600355825f52600560205260405f209283546001810180911161047b5760019455815f52600460205260405f20817fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055815f52600960205260405f20847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790555f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a40161051c565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4d696e7420746f20746865207a65726f206164647265737300000000000000006044820152fd5b3461022b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b576020600354604051908152f35b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57600435805f52600960205261072960ff60405f205416611cde565b80815f927a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008110156109f4575b50806d04ee2d6d415b85acef8100000000600a9210156109d9575b662386f26fc100008110156109c5575b6305f5e1008110156109b4575b6127108110156109a5575b6064811015610997575b101561098d575b6001820190600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60216107f16107db86611a3f565b956107e960405197886119fe565b808752611a3f565b957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06020870197013688378501015b01917f30313233343536373839616263646566000000000000000000000000000000008282061a835304801561087a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600a9192610820565b5050604051905f9060025461088e81611ae0565b906001811690811561094b57506001146108f3575b506108ef936108e3928492518092825e015f8152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826119fe565b604051918291826118fe565b0390f35b90915060025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5f905b8282106109355750508201602001906108ef6108a3565b600181602092548385890101520191019061091e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016602080870191909152821515909202850190910192506108ef90506108a3565b90600101906107a5565b60646002910493019261079e565b61271060049104930192610794565b6305f5e10060089104930192610789565b662386f26fc100006010910493019261077c565b6d04ee2d6d415b85acef81000000006020910493019261076c565b604093507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000090049050600a610751565b3461022b5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57610a56611946565b610a5e611969565b604435906064359267ffffffffffffffff841161022b573660238501121561022b57610a97610aaf943690602481600401359101611a79565b50610aaa610aa58433611e50565b611bee565b611f92565b005b3461022b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5760043567ffffffffffffffff811161022b57610b00903690600401611aaf565b60243567ffffffffffffffff811161022b57610b20903690600401611aaf565b9060443567ffffffffffffffff811161022b57610b41903690600401611aaf565b94610b6573ffffffffffffffffffffffffffffffffffffffff600854163314611c79565b83851480610c1e575b15610bc0575f5b868110610b7e57005b80610bba610b926105486001948a87611df2565b610ba0610548848a8a611df2565b610bab848c89611df2565b3591610aaa610aa58433611e50565b01610b75565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f417272617973206c656e677468206d69736d61746368000000000000000000006044820152fd5b50858414610b6e565b3461022b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57610c5e611946565b6024359081151580920361022b5773ffffffffffffffffffffffffffffffffffffffff1690338214610cf957335f52600760205260405f20825f5260205260405f207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f417070726f766520746f2063616c6c65720000000000000000000000000000006044820152fd5b3461022b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b576040515f600154610d9581611ae0565b8084529060018116908115610e1b5750600114610dbd575b6108ef836108e3818503826119fe565b91905060015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6915f905b808210610e01575090915081016020016108e3610dad565b919260018160209254838588010152019101909291610de9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660208086019190915291151560051b840190910191506108e39050610dad565b3461022b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57602073ffffffffffffffffffffffffffffffffffffffff60085416604051908152f35b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5773ffffffffffffffffffffffffffffffffffffffff610efa611946565b168015610f17575f526005602052602060405f2054604051908152f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f42616c616e636520717565727920666f7220746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5773ffffffffffffffffffffffffffffffffffffffff610fe7611946565b610ff682600854163314611c79565b16801561064657600354907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461047b5760018201600355805f52600560205260405f209182546001810180911161047b5760209355805f526004835260405f20827fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055805f526009835260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905580604051925f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a48152f35b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57602061111e600435611d43565b73ffffffffffffffffffffffffffffffffffffffff60405191168152f35b3461022b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b576003547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161047b57602090604051908152f35b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5760043567ffffffffffffffff811161022b573660238201121561022b57611202903690602481600401359101611a79565b61122573ffffffffffffffffffffffffffffffffffffffff600854163314611c79565b805167ffffffffffffffff81116113fd57611241600254611ae0565b601f811161135c575b50602091601f82116001146112a4579181925f92611299575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916176002555f80f35b015190508280611263565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082169260025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace915f5b8581106113445750836001951061130d575b505050811b01600255005b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055828080611302565b919260206001819286850151815501940192016112f0565b60025f52601f820160051c7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190602083106113d5575b601f0160051c7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905b8181106113ca575061124a565b5f81556001016113bd565b7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9150611393565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5760043561147f73ffffffffffffffffffffffffffffffffffffffff600854163314611c79565b805f52600960205261149760ff60405f205416611cde565b73ffffffffffffffffffffffffffffffffffffffff6114b582611d43565b6114be8361214f565b16805f52600560205260405f209081547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161047b575f92558282526004602052604082207fffffffffffffffffffffffff000000000000000000000000000000000000000081541690558282526009602052604082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a4005b3461022b57610aaf6115963661198c565b915f6040516115a66020826119fe565b52610aaa610aa58433611e50565b3461022b57610aaf6115c53661198c565b91610aaa610aa58433611e50565b3461022b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5761160a611946565b6024359073ffffffffffffffffffffffffffffffffffffffff8061162d84611d43565b1691169080821461175b578033148015611725575b156116a157825f52600660205260405f20827fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9255f80a4005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f417070726f76652063616c6c6572206973206e6f74206f776e6572206e6f722060448201527f617070726f76656420666f7220616c6c000000000000000000000000000000006064820152fd5b50805f52600760205260405f2073ffffffffffffffffffffffffffffffffffffffff33165f5260205260ff60405f205416611642565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f417070726f76616c20746f2063757272656e74206f776e6572000000000000006044820152fd5b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57602061111e600435611b31565b3461022b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b576040515f5f5461183281611ae0565b8084529060018116908115610e1b5750600114611859576108ef836108e3818503826119fe565b5f8080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563939250905b80821061189b575090915081016020016108e3610dad565b919260018160209254838588010152019101909291611883565b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b576020906004355f526009825260ff60405f20541615158152f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361022b57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361022b57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc606091011261022b5760043573ffffffffffffffffffffffffffffffffffffffff8116810361022b579060243573ffffffffffffffffffffffffffffffffffffffff8116810361022b579060443590565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176113fd57604052565b67ffffffffffffffff81116113fd57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192611a8582611a3f565b91611a9360405193846119fe565b82948184528183011161022b578281602093845f960137010152565b9181601f8401121561022b5782359167ffffffffffffffff831161022b576020808501948460051b01011161022b57565b90600182811c92168015611b27575b6020831014611afa57565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b91607f1691611aef565b805f52600960205260ff60405f20541615611b6b575f52600660205273ffffffffffffffffffffffffffffffffffffffff60405f20541690565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f417070726f76656420717565727920666f72206e6f6e6578697374656e74207460448201527f6f6b656e000000000000000000000000000000000000000000000000000000006064820152fd5b15611bf557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f76656400000000000000000000000000000000000000000000006064820152fd5b15611c8057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e65720000000000000000006044820152fd5b15611ce557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152fd5b5f52600460205273ffffffffffffffffffffffffffffffffffffffff60405f2054168015611d6e5790565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b6560448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152fd5b9190811015611e025760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff8116810361022b5790565b815f52600960205260ff60405f20541615611f0f5773ffffffffffffffffffffffffffffffffffffffff80600854169116908114611f085773ffffffffffffffffffffffffffffffffffffffff611ea683611d43565b16808214928315611edd575b508215611ebe57505090565b9091505f52600760205260405f20905f5260205260ff60405f20541690565b82919350611eff73ffffffffffffffffffffffffffffffffffffffff91611b31565b1614915f611eb2565b5050600190565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f7220717565727920666f72206e6f6e6578697374656e74207460448201527f6f6b656e000000000000000000000000000000000000000000000000000000006064820152fd5b9073ffffffffffffffffffffffffffffffffffffffff9182611fb385611d43565b911692839116036120f15773ffffffffffffffffffffffffffffffffffffffff1690811561209357611fe48361214f565b805f52600560205260405f208054907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820191821161047b5755815f52600560205260405f208054906001820180921161047b5755825f52600460205260405f20827fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5472616e7366657220746f20746865207a65726f2061646472657373000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5472616e736665722066726f6d20696e636f7272656374206f776e65720000006044820152fd5b805f52600660205260405f207fffffffffffffffffffffffff000000000000000000000000000000000000000081541690555f73ffffffffffffffffffffffffffffffffffffffff6121a083611d43565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258280a456fea264697066735822122080f21d8774c03254fd5037b62367f955514a12dd0f1e5e862f624af1fa86c05b64736f6c634300081c0033",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f3560e01c908162923f9e146118b55750806306fdde03146117f5578063081812fc146117b9578063095ea7b3146115d357806323b872dd146115b457806342842e0e1461158557806342966c681461142a57806355f804b3146111a2578063561892361461113c5780636352211e146110e25780636a62784214610f9b57806370a0823114610eae5780638da5cb5b14610e5d57806395d89b4114610d57578063a22cb46514610c27578063b818f9e414610ab1578063b88d4fde14610a1f578063c87b56dd146106df578063caa0f92a146106a4578063d67b06c1146104a8578063dc8e92ea146102c0578063e985e9c51461022f5763f2fde38b14610118575f80fd5b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5761014f611946565b6008549073ffffffffffffffffffffffffffffffffffffffff80831691610177338414611c79565b169182156101cd57827fffffffffffffffffffffffff0000000000000000000000000000000000000000927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a31617600855005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6577206f776e657220697320746865207a65726f20616464726573730000006044820152fd5b5f80fd5b3461022b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57610266611946565b73ffffffffffffffffffffffffffffffffffffffff610283611969565b91165f52600760205273ffffffffffffffffffffffffffffffffffffffff60405f2091165f52602052602060ff60405f2054166040519015158152f35b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5760043567ffffffffffffffff811161022b5761030f903690600401611aaf565b61033273ffffffffffffffffffffffffffffffffffffffff600854163314611c79565b5f5b81811061033d57005b610348818385611df2565b359061036d3373ffffffffffffffffffffffffffffffffffffffff6008541614611c79565b815f52600960205261038560ff60405f205416611cde565b73ffffffffffffffffffffffffffffffffffffffff6103a383611d43565b6103ac8461214f565b1691825f52600560205260405f208054937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850194851161047b576001945f92558282526004602052604082207fffffffffffffffffffffffff000000000000000000000000000000000000000081541690558282526009602052604082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a401610334565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5760043567ffffffffffffffff811161022b576104f7903690600401611aaf565b61051a73ffffffffffffffffffffffffffffffffffffffff600854163314611c79565b5f5b81811061052557005b73ffffffffffffffffffffffffffffffffffffffff61054d610548838587611df2565b611e2f565b61055c33836008541614611c79565b16908115610646576003547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461047b5760018101600355825f52600560205260405f209283546001810180911161047b5760019455815f52600460205260405f20817fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055815f52600960205260405f20847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790555f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a40161051c565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4d696e7420746f20746865207a65726f206164647265737300000000000000006044820152fd5b3461022b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b576020600354604051908152f35b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57600435805f52600960205261072960ff60405f205416611cde565b80815f927a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008110156109f4575b50806d04ee2d6d415b85acef8100000000600a9210156109d9575b662386f26fc100008110156109c5575b6305f5e1008110156109b4575b6127108110156109a5575b6064811015610997575b101561098d575b6001820190600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60216107f16107db86611a3f565b956107e960405197886119fe565b808752611a3f565b957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06020870197013688378501015b01917f30313233343536373839616263646566000000000000000000000000000000008282061a835304801561087a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600a9192610820565b5050604051905f9060025461088e81611ae0565b906001811690811561094b57506001146108f3575b506108ef936108e3928492518092825e015f8152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826119fe565b604051918291826118fe565b0390f35b90915060025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5f905b8282106109355750508201602001906108ef6108a3565b600181602092548385890101520191019061091e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016602080870191909152821515909202850190910192506108ef90506108a3565b90600101906107a5565b60646002910493019261079e565b61271060049104930192610794565b6305f5e10060089104930192610789565b662386f26fc100006010910493019261077c565b6d04ee2d6d415b85acef81000000006020910493019261076c565b604093507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000090049050600a610751565b3461022b5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57610a56611946565b610a5e611969565b604435906064359267ffffffffffffffff841161022b573660238501121561022b57610a97610aaf943690602481600401359101611a79565b50610aaa610aa58433611e50565b611bee565b611f92565b005b3461022b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5760043567ffffffffffffffff811161022b57610b00903690600401611aaf565b60243567ffffffffffffffff811161022b57610b20903690600401611aaf565b9060443567ffffffffffffffff811161022b57610b41903690600401611aaf565b94610b6573ffffffffffffffffffffffffffffffffffffffff600854163314611c79565b83851480610c1e575b15610bc0575f5b868110610b7e57005b80610bba610b926105486001948a87611df2565b610ba0610548848a8a611df2565b610bab848c89611df2565b3591610aaa610aa58433611e50565b01610b75565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f417272617973206c656e677468206d69736d61746368000000000000000000006044820152fd5b50858414610b6e565b3461022b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57610c5e611946565b6024359081151580920361022b5773ffffffffffffffffffffffffffffffffffffffff1690338214610cf957335f52600760205260405f20825f5260205260405f207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f417070726f766520746f2063616c6c65720000000000000000000000000000006044820152fd5b3461022b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b576040515f600154610d9581611ae0565b8084529060018116908115610e1b5750600114610dbd575b6108ef836108e3818503826119fe565b91905060015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6915f905b808210610e01575090915081016020016108e3610dad565b919260018160209254838588010152019101909291610de9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660208086019190915291151560051b840190910191506108e39050610dad565b3461022b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57602073ffffffffffffffffffffffffffffffffffffffff60085416604051908152f35b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5773ffffffffffffffffffffffffffffffffffffffff610efa611946565b168015610f17575f526005602052602060405f2054604051908152f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f42616c616e636520717565727920666f7220746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5773ffffffffffffffffffffffffffffffffffffffff610fe7611946565b610ff682600854163314611c79565b16801561064657600354907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461047b5760018201600355805f52600560205260405f209182546001810180911161047b5760209355805f526004835260405f20827fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055805f526009835260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905580604051925f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a48152f35b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57602061111e600435611d43565b73ffffffffffffffffffffffffffffffffffffffff60405191168152f35b3461022b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b576003547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161047b57602090604051908152f35b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5760043567ffffffffffffffff811161022b573660238201121561022b57611202903690602481600401359101611a79565b61122573ffffffffffffffffffffffffffffffffffffffff600854163314611c79565b805167ffffffffffffffff81116113fd57611241600254611ae0565b601f811161135c575b50602091601f82116001146112a4579181925f92611299575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916176002555f80f35b015190508280611263565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082169260025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace915f5b8581106113445750836001951061130d575b505050811b01600255005b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055828080611302565b919260206001819286850151815501940192016112f0565b60025f52601f820160051c7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190602083106113d5575b601f0160051c7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905b8181106113ca575061124a565b5f81556001016113bd565b7f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9150611393565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5760043561147f73ffffffffffffffffffffffffffffffffffffffff600854163314611c79565b805f52600960205261149760ff60405f205416611cde565b73ffffffffffffffffffffffffffffffffffffffff6114b582611d43565b6114be8361214f565b16805f52600560205260405f209081547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161047b575f92558282526004602052604082207fffffffffffffffffffffffff000000000000000000000000000000000000000081541690558282526009602052604082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a4005b3461022b57610aaf6115963661198c565b915f6040516115a66020826119fe565b52610aaa610aa58433611e50565b3461022b57610aaf6115c53661198c565b91610aaa610aa58433611e50565b3461022b5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b5761160a611946565b6024359073ffffffffffffffffffffffffffffffffffffffff8061162d84611d43565b1691169080821461175b578033148015611725575b156116a157825f52600660205260405f20827fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9255f80a4005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f417070726f76652063616c6c6572206973206e6f74206f776e6572206e6f722060448201527f617070726f76656420666f7220616c6c000000000000000000000000000000006064820152fd5b50805f52600760205260405f2073ffffffffffffffffffffffffffffffffffffffff33165f5260205260ff60405f205416611642565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f417070726f76616c20746f2063757272656e74206f776e6572000000000000006044820152fd5b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b57602061111e600435611b31565b3461022b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b576040515f5f5461183281611ae0565b8084529060018116908115610e1b5750600114611859576108ef836108e3818503826119fe565b5f8080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563939250905b80821061189b575090915081016020016108e3610dad565b919260018160209254838588010152019101909291611883565b3461022b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022b576020906004355f526009825260ff60405f20541615158152f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361022b57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361022b57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc606091011261022b5760043573ffffffffffffffffffffffffffffffffffffffff8116810361022b579060243573ffffffffffffffffffffffffffffffffffffffff8116810361022b579060443590565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176113fd57604052565b67ffffffffffffffff81116113fd57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192611a8582611a3f565b91611a9360405193846119fe565b82948184528183011161022b578281602093845f960137010152565b9181601f8401121561022b5782359167ffffffffffffffff831161022b576020808501948460051b01011161022b57565b90600182811c92168015611b27575b6020831014611afa57565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b91607f1691611aef565b805f52600960205260ff60405f20541615611b6b575f52600660205273ffffffffffffffffffffffffffffffffffffffff60405f20541690565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f417070726f76656420717565727920666f72206e6f6e6578697374656e74207460448201527f6f6b656e000000000000000000000000000000000000000000000000000000006064820152fd5b15611bf557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f76656400000000000000000000000000000000000000000000006064820152fd5b15611c8057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e65720000000000000000006044820152fd5b15611ce557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152fd5b5f52600460205273ffffffffffffffffffffffffffffffffffffffff60405f2054168015611d6e5790565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b6560448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152fd5b9190811015611e025760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff8116810361022b5790565b815f52600960205260ff60405f20541615611f0f5773ffffffffffffffffffffffffffffffffffffffff80600854169116908114611f085773ffffffffffffffffffffffffffffffffffffffff611ea683611d43565b16808214928315611edd575b508215611ebe57505090565b9091505f52600760205260405f20905f5260205260ff60405f20541690565b82919350611eff73ffffffffffffffffffffffffffffffffffffffff91611b31565b1614915f611eb2565b5050600190565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f7220717565727920666f72206e6f6e6578697374656e74207460448201527f6f6b656e000000000000000000000000000000000000000000000000000000006064820152fd5b9073ffffffffffffffffffffffffffffffffffffffff9182611fb385611d43565b911692839116036120f15773ffffffffffffffffffffffffffffffffffffffff1690811561209357611fe48361214f565b805f52600560205260405f208054907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820191821161047b5755815f52600560205260405f208054906001820180921161047b5755825f52600460205260405f20827fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5472616e7366657220746f20746865207a65726f2061646472657373000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5472616e736665722066726f6d20696e636f7272656374206f776e65720000006044820152fd5b805f52600660205260405f207fffffffffffffffffffffffff000000000000000000000000000000000000000081541690555f73ffffffffffffffffffffffffffffffffffffffff6121a083611d43565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258280a456fea264697066735822122080f21d8774c03254fd5037b62367f955514a12dd0f1e5e862f624af1fa86c05b64736f6c634300081c0033",
  "devdoc": {
    "details": "Custom implementation of NFT with batch operations and owner privilegesCompletely independent of OpenZeppelin libraries to minimize gas costs",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID",
        "params": {
          "to": "The address to approve for token transfer",
          "tokenId": "The token ID to approve"
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in an owner's account",
        "params": {
          "owner_": "The address to query the balance of"
        }
      },
      "batchBurn(uint256[])": {
        "details": "Burn NFTs in batch",
        "params": {
          "tokenIds": "Array of token IDs to be burned"
        }
      },
      "batchMint(address[])": {
        "details": "Mint NFTs in batch to multiple addresses",
        "params": {
          "to": "Array of addresses to receive the minted NFTs"
        }
      },
      "batchTransferFrom(address[],address[],uint256[])": {
        "details": "Transfer NFTs in batch from multiple owners to multiple recipients",
        "params": {
          "from": "Array of current token owners",
          "to": "Array of new token owners",
          "tokenIds": "Array of token IDs to be transferred"
        }
      },
      "burn(uint256)": {
        "details": "Burn a single NFT",
        "params": {
          "tokenId": "ID of the token to be burned"
        }
      },
      "constructor": {
        "details": "Constructor function",
        "params": {
          "baseTokenURI_": "Base URI for token metadata",
          "name_": "Name of the NFT collection",
          "symbol_": "Symbol of the NFT collection"
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID",
        "params": {
          "tokenId": "The token ID to query"
        }
      },
      "getCurrentTokenId()": {
        "details": "Get the current token ID counter value",
        "returns": {
          "_0": "Current token ID count"
        }
      },
      "getNextTokenId()": {
        "details": "Get the next token ID that will be minted",
        "returns": {
          "_0": "Next token ID"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Checks if an operator is approved by an owner",
        "params": {
          "operator": "The operator address",
          "owner_": "The owner address"
        }
      },
      "mint(address)": {
        "details": "Mint a single NFT to an address",
        "params": {
          "to": "Address to receive the minted NFT"
        },
        "returns": {
          "_0": "tokenId The ID of the minted token"
        }
      },
      "name()": {
        "details": "Returns the name of the token"
      },
      "owner()": {
        "details": "Returns the address of the current owner"
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of a token",
        "params": {
          "tokenId": "The token ID to query"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers a token from one address to another",
        "params": {
          "from": "The current owner of the token",
          "to": "The address to receive the token",
          "tokenId": "The token ID to transfer"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers a token from one address to another with additional data",
        "params": {
          "_data": "Additional data to send with the transfer",
          "from": "The current owner of the token",
          "to": "The address to receive the token",
          "tokenId": "The token ID to transfer"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator",
        "params": {
          "approved": "Boolean representing the status of the approval to be set",
          "operator": "The address to set the approval for"
        }
      },
      "setBaseURI(string)": {
        "details": "Set the base URI for token metadata",
        "params": {
          "baseURI": "New base URI"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token"
      },
      "tokenExists(uint256)": {
        "details": "Check if a token exists",
        "params": {
          "tokenId": "ID of the token to check"
        },
        "returns": {
          "_0": "Boolean indicating if the token exists"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for a token",
        "params": {
          "tokenId": "The token ID to query"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers a token from one address to another",
        "params": {
          "from": "The current owner of the token",
          "to": "The address to receive the token",
          "tokenId": "The token ID to transfer"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account",
        "params": {
          "newOwner": "The address to transfer ownership to"
        }
      }
    },
    "title": "Gas-Optimized CPNFT Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4,
        "contract": "contracts/cpop/CPNFT.sol:CPNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6,
        "contract": "contracts/cpop/CPNFT.sol:CPNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/cpop/CPNFT.sol:CPNFT",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/cpop/CPNFT.sol:CPNFT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 14,
        "contract": "contracts/cpop/CPNFT.sol:CPNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 18,
        "contract": "contracts/cpop/CPNFT.sol:CPNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22,
        "contract": "contracts/cpop/CPNFT.sol:CPNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 28,
        "contract": "contracts/cpop/CPNFT.sol:CPNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 30,
        "contract": "contracts/cpop/CPNFT.sol:CPNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 34,
        "contract": "contracts/cpop/CPNFT.sol:CPNFT",
        "label": "_mintedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}