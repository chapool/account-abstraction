{
  "address": "0x29aAD71f97Da6AA0F4096cfd50DA395eAa18D964",
  "abi": [
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "BatchNFTTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "BatchTokenTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "SingleNFTBatchTransfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "nftContracts",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferMultipleNFTCollections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenContracts",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferMultipleTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferNFTToSingle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountPerRecipient",
          "type": "uint256"
        }
      ],
      "name": "batchTransferTokenEqual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "nftRecipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokenRecipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "combinedBatchTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "hasTokenAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isNFTApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ca33acf2b57787c5d2a8e940b95978e725bbf9ffe8c75f8d93e0c7b7834e26b",
  "receipt": {
    "to": null,
    "from": "0xa3B605fB633AD0A0DC4B74b10bBfc40fDB050d35",
    "contractAddress": "0x29aAD71f97Da6AA0F4096cfd50DA395eAa18D964",
    "transactionIndex": 1,
    "gasUsed": "1578999",
    "logsBloom": "0x
    "blockHash": "0x1b30f45521fe5e60ab6ab411fa2a83ad257a58f82869112c06d78b1d19562142",
    "transactionHash": "0x4ca33acf2b57787c5d2a8e940b95978e725bbf9ffe8c75f8d93e0c7b7834e26b",
    "logs": [],
    "blockNumber": 9428192,
    "cumulativeGasUsed": "1646117",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e104b196d5d9abde523f6f34638a92da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"BatchNFTTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"BatchTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"SingleNFTBatchTransfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nftContracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferMultipleNFTCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenContracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferMultipleTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferNFTToSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountPerRecipient\",\"type\":\"uint256\"}],\"name\":\"batchTransferTokenEqual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"nftRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"combinedBatchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hasTokenAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isNFTApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Batch transfer contract for NFTs (ERC721) and Fungible Tokens (ERC20)\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"batchTransferMultipleNFTCollections(address[],address,uint256[])\":{\"details\":\"Transfer multiple NFTs from different collections to a single recipient\",\"params\":{\"nftContracts\":\"Array of ERC721 contract addresses\",\"to\":\"Recipient address\",\"tokenIds\":\"Array of token IDs (must match nftContracts length)\"}},\"batchTransferMultipleTokens(address[],address,uint256[])\":{\"details\":\"Batch transfer multiple ERC20 tokens to a single recipient\",\"params\":{\"amounts\":\"Array of token amounts (must match tokenContracts length)\",\"to\":\"Recipient address\",\"tokenContracts\":\"Array of ERC20 contract addresses\"}},\"batchTransferNFT(address,address[],uint256[])\":{\"details\":\"Batch transfer NFTs from msg.sender to multiple recipients\",\"params\":{\"nftContract\":\"Address of the ERC721 contract\",\"recipients\":\"Array of recipient addresses (must match tokenIds length)\",\"tokenIds\":\"Array of token IDs to transfer\"}},\"batchTransferNFTToSingle(address,address,uint256[])\":{\"details\":\"Transfer multiple NFTs from msg.sender to a single recipient\",\"params\":{\"nftContract\":\"Address of the ERC721 contract\",\"to\":\"Recipient address\",\"tokenIds\":\"Array of token IDs to transfer\"}},\"batchTransferToken(address,address[],uint256[])\":{\"details\":\"Batch transfer ERC20 tokens from msg.sender to multiple recipients\",\"params\":{\"amounts\":\"Array of token amounts to transfer (must match recipients length)\",\"recipients\":\"Array of recipient addresses\",\"tokenContract\":\"Address of the ERC20 contract\"}},\"batchTransferTokenEqual(address,address[],uint256)\":{\"details\":\"Batch transfer equal amounts of ERC20 tokens to multiple recipients\",\"params\":{\"amountPerRecipient\":\"Amount of tokens to send to each recipient\",\"recipients\":\"Array of recipient addresses\",\"tokenContract\":\"Address of the ERC20 contract\"}},\"combinedBatchTransfer(address,address[],uint256[],address,address[],uint256[])\":{\"details\":\"Combined batch transfer of both NFTs and ERC20 tokens\",\"params\":{\"nftContract\":\"Address of the ERC721 contract (set to address(0) to skip NFT transfer)\",\"nftRecipients\":\"Array of NFT recipient addresses\",\"tokenAmounts\":\"Array of token amounts\",\"tokenContract\":\"Address of the ERC20 contract (set to address(0) to skip token transfer)\",\"tokenIds\":\"Array of NFT token IDs\",\"tokenRecipients\":\"Array of token recipient addresses\"}},\"hasTokenAllowance(address,address,uint256)\":{\"details\":\"Check if user has sufficient token allowance for this contract\",\"params\":{\"amount\":\"Required amount\",\"owner\":\"Address of the token owner\",\"tokenContract\":\"Address of the ERC20 contract\"},\"returns\":{\"_0\":\"bool Whether the allowance is sufficient\"}},\"isNFTApproved(address,address)\":{\"details\":\"Check if user has approved this contract for a specific NFT collection\",\"params\":{\"nftContract\":\"Address of the ERC721 contract\",\"owner\":\"Address of the token owner\"},\"returns\":{\"_0\":\"bool Whether the contract is approved\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} tokenId token is transferred to this contract via {IERC721-safeTransferFrom} by operator from from, this function is called.\"}},\"title\":\"BatchTransfer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchTransferMultipleNFTCollections(address[],address,uint256[])\":{\"notice\":\"msg.sender must own all tokenIds and have approved this contract for each collection\"},\"batchTransferMultipleTokens(address[],address,uint256[])\":{\"notice\":\"msg.sender must have approved this contract for each token\"},\"batchTransferNFT(address,address[],uint256[])\":{\"notice\":\"msg.sender must own all tokenIds and have approved this contract\"},\"batchTransferNFTToSingle(address,address,uint256[])\":{\"notice\":\"msg.sender must own all tokenIds and have approved this contract\"},\"batchTransferToken(address,address[],uint256[])\":{\"notice\":\"msg.sender must have approved this contract for the total amount\"},\"batchTransferTokenEqual(address,address[],uint256)\":{\"notice\":\"msg.sender must have approved this contract for (amountPerRecipient * recipients.length)\"},\"combinedBatchTransfer(address,address[],uint256[],address,address[],uint256[])\":{\"notice\":\"This function allows transferring both NFTs and tokens in a single transaction\"}},\"notice\":\"This contract allows users to batch transfer NFT and FT tokens efficiently\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/BatchTransfer.sol\":\"BatchTransfer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf78f05f3b8c9f75570e85300d7b4600d7f6f6a198449273f31d44c1641adb46f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuardTransient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/ReentrancyGuardTransient.sol)\\n\\npragma solidity ^0.8.24;\\n\\nimport {TransientSlot} from \\\"./TransientSlot.sol\\\";\\n\\n/**\\n * @dev Variant of {ReentrancyGuard} that uses transient storage.\\n *\\n * NOTE: This variant only works on networks where EIP-1153 is available.\\n *\\n * _Available since v5.1._\\n */\\nabstract contract ReentrancyGuardTransient {\\n    using TransientSlot for *;\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant REENTRANCY_GUARD_STORAGE =\\n        0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, REENTRANCY_GUARD_STORAGE.asBoolean().tload() will be false\\n        if (_reentrancyGuardEntered()) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(true);\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(false);\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return REENTRANCY_GUARD_STORAGE.asBoolean().tload();\\n    }\\n}\\n\",\"keccak256\":\"0xe56ff5015046505f81f9d62671a784e933dd099db4c3a8fa8de598f20af2c5a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/TransientSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/TransientSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/TransientSlot.js.\\n\\npragma solidity ^0.8.24;\\n\\n/**\\n * @dev Library for reading and writing value-types to specific transient storage slots.\\n *\\n * Transient slots are often used to store temporary values that are removed after the current transaction.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n *  * Example reading and writing values using transient storage:\\n * ```solidity\\n * contract Lock {\\n *     using TransientSlot for *;\\n *\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _LOCK_SLOT = 0xf4678858b2b588224636b8522b729e7722d32fc491da849ed75b3fdf3c84f542;\\n *\\n *     modifier locked() {\\n *         require(!_LOCK_SLOT.asBoolean().tload());\\n *\\n *         _LOCK_SLOT.asBoolean().tstore(true);\\n *         _;\\n *         _LOCK_SLOT.asBoolean().tstore(false);\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary TransientSlot {\\n    /**\\n     * @dev UDVT that represents a slot holding an address.\\n     */\\n    type AddressSlot is bytes32;\\n\\n    /**\\n     * @dev Cast an arbitrary slot to a AddressSlot.\\n     */\\n    function asAddress(bytes32 slot) internal pure returns (AddressSlot) {\\n        return AddressSlot.wrap(slot);\\n    }\\n\\n    /**\\n     * @dev UDVT that represents a slot holding a bool.\\n     */\\n    type BooleanSlot is bytes32;\\n\\n    /**\\n     * @dev Cast an arbitrary slot to a BooleanSlot.\\n     */\\n    function asBoolean(bytes32 slot) internal pure returns (BooleanSlot) {\\n        return BooleanSlot.wrap(slot);\\n    }\\n\\n    /**\\n     * @dev UDVT that represents a slot holding a bytes32.\\n     */\\n    type Bytes32Slot is bytes32;\\n\\n    /**\\n     * @dev Cast an arbitrary slot to a Bytes32Slot.\\n     */\\n    function asBytes32(bytes32 slot) internal pure returns (Bytes32Slot) {\\n        return Bytes32Slot.wrap(slot);\\n    }\\n\\n    /**\\n     * @dev UDVT that represents a slot holding a uint256.\\n     */\\n    type Uint256Slot is bytes32;\\n\\n    /**\\n     * @dev Cast an arbitrary slot to a Uint256Slot.\\n     */\\n    function asUint256(bytes32 slot) internal pure returns (Uint256Slot) {\\n        return Uint256Slot.wrap(slot);\\n    }\\n\\n    /**\\n     * @dev UDVT that represents a slot holding a int256.\\n     */\\n    type Int256Slot is bytes32;\\n\\n    /**\\n     * @dev Cast an arbitrary slot to a Int256Slot.\\n     */\\n    function asInt256(bytes32 slot) internal pure returns (Int256Slot) {\\n        return Int256Slot.wrap(slot);\\n    }\\n\\n    /**\\n     * @dev Load the value held at location `slot` in transient storage.\\n     */\\n    function tload(AddressSlot slot) internal view returns (address value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Store `value` at location `slot` in transient storage.\\n     */\\n    function tstore(AddressSlot slot, address value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(slot, value)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load the value held at location `slot` in transient storage.\\n     */\\n    function tload(BooleanSlot slot) internal view returns (bool value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Store `value` at location `slot` in transient storage.\\n     */\\n    function tstore(BooleanSlot slot, bool value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(slot, value)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load the value held at location `slot` in transient storage.\\n     */\\n    function tload(Bytes32Slot slot) internal view returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Store `value` at location `slot` in transient storage.\\n     */\\n    function tstore(Bytes32Slot slot, bytes32 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(slot, value)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load the value held at location `slot` in transient storage.\\n     */\\n    function tload(Uint256Slot slot) internal view returns (uint256 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Store `value` at location `slot` in transient storage.\\n     */\\n    function tstore(Uint256Slot slot, uint256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(slot, value)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load the value held at location `slot` in transient storage.\\n     */\\n    function tload(Int256Slot slot) internal view returns (int256 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Store `value` at location `slot` in transient storage.\\n     */\\n    function tstore(Int256Slot slot, int256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(slot, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac673fa1e374d9e6107504af363333e3e5f6344d2e83faf57d9bfd41d77cc946\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/utils/BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuardTransient.sol\\\";\\n\\n/**\\n * @title BatchTransfer\\n * @dev Batch transfer contract for NFTs (ERC721) and Fungible Tokens (ERC20)\\n * @notice This contract allows users to batch transfer NFT and FT tokens efficiently\\n */\\ncontract BatchTransfer is ReentrancyGuardTransient {\\n    using SafeERC20 for IERC20;\\n\\n    // ============================================\\n    // EVENTS\\n    // ============================================\\n    \\n    event BatchNFTTransfer(\\n        address indexed nftContract,\\n        address indexed from,\\n        uint256[] tokenIds,\\n        address[] recipients\\n    );\\n    \\n    event BatchTokenTransfer(\\n        address indexed tokenContract,\\n        address indexed from,\\n        uint256 totalAmount,\\n        address[] recipients\\n    );\\n    \\n    event SingleNFTBatchTransfer(\\n        address indexed nftContract,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] tokenIds\\n    );\\n\\n    // ============================================\\n    // NFT BATCH TRANSFER FUNCTIONS\\n    // ============================================\\n    \\n    /**\\n     * @dev Batch transfer NFTs from msg.sender to multiple recipients\\n     * @param nftContract Address of the ERC721 contract\\n     * @param recipients Array of recipient addresses (must match tokenIds length)\\n     * @param tokenIds Array of token IDs to transfer\\n     * @notice msg.sender must own all tokenIds and have approved this contract\\n     */\\n    function batchTransferNFT(\\n        address nftContract,\\n        address[] calldata recipients,\\n        uint256[] calldata tokenIds\\n    ) external nonReentrant {\\n        require(nftContract != address(0), \\\"Invalid NFT contract address\\\");\\n        require(recipients.length == tokenIds.length, \\\"Arrays length mismatch\\\");\\n        require(recipients.length > 0, \\\"Empty arrays\\\");\\n        \\n        IERC721 nft = IERC721(nftContract);\\n        \\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(recipients[i] != address(0), \\\"Invalid recipient address\\\");\\n            require(nft.ownerOf(tokenIds[i]) == msg.sender, \\\"Not token owner\\\");\\n            \\n            nft.safeTransferFrom(msg.sender, recipients[i], tokenIds[i]);\\n        }\\n        \\n        emit BatchNFTTransfer(nftContract, msg.sender, tokenIds, recipients);\\n    }\\n    \\n    /**\\n     * @dev Transfer multiple NFTs from msg.sender to a single recipient\\n     * @param nftContract Address of the ERC721 contract\\n     * @param to Recipient address\\n     * @param tokenIds Array of token IDs to transfer\\n     * @notice msg.sender must own all tokenIds and have approved this contract\\n     */\\n    function batchTransferNFTToSingle(\\n        address nftContract,\\n        address to,\\n        uint256[] calldata tokenIds\\n    ) external nonReentrant {\\n        require(nftContract != address(0), \\\"Invalid NFT contract address\\\");\\n        require(to != address(0), \\\"Invalid recipient address\\\");\\n        require(tokenIds.length > 0, \\\"Empty token array\\\");\\n        \\n        IERC721 nft = IERC721(nftContract);\\n        \\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(nft.ownerOf(tokenIds[i]) == msg.sender, \\\"Not token owner\\\");\\n            nft.safeTransferFrom(msg.sender, to, tokenIds[i]);\\n        }\\n        \\n        emit SingleNFTBatchTransfer(nftContract, msg.sender, to, tokenIds);\\n    }\\n    \\n    /**\\n     * @dev Transfer multiple NFTs from different collections to a single recipient\\n     * @param nftContracts Array of ERC721 contract addresses\\n     * @param to Recipient address\\n     * @param tokenIds Array of token IDs (must match nftContracts length)\\n     * @notice msg.sender must own all tokenIds and have approved this contract for each collection\\n     */\\n    function batchTransferMultipleNFTCollections(\\n        address[] calldata nftContracts,\\n        address to,\\n        uint256[] calldata tokenIds\\n    ) external nonReentrant {\\n        require(nftContracts.length == tokenIds.length, \\\"Arrays length mismatch\\\");\\n        require(to != address(0), \\\"Invalid recipient address\\\");\\n        require(nftContracts.length > 0, \\\"Empty arrays\\\");\\n        \\n        for (uint256 i = 0; i < nftContracts.length; i++) {\\n            require(nftContracts[i] != address(0), \\\"Invalid NFT contract address\\\");\\n            \\n            IERC721 nft = IERC721(nftContracts[i]);\\n            require(nft.ownerOf(tokenIds[i]) == msg.sender, \\\"Not token owner\\\");\\n            \\n            nft.safeTransferFrom(msg.sender, to, tokenIds[i]);\\n        }\\n    }\\n\\n    // ============================================\\n    // ERC20 BATCH TRANSFER FUNCTIONS\\n    // ============================================\\n    \\n    /**\\n     * @dev Batch transfer ERC20 tokens from msg.sender to multiple recipients\\n     * @param tokenContract Address of the ERC20 contract\\n     * @param recipients Array of recipient addresses\\n     * @param amounts Array of token amounts to transfer (must match recipients length)\\n     * @notice msg.sender must have approved this contract for the total amount\\n     */\\n    function batchTransferToken(\\n        address tokenContract,\\n        address[] calldata recipients,\\n        uint256[] calldata amounts\\n    ) external nonReentrant {\\n        require(tokenContract != address(0), \\\"Invalid token contract address\\\");\\n        require(recipients.length == amounts.length, \\\"Arrays length mismatch\\\");\\n        require(recipients.length > 0, \\\"Empty arrays\\\");\\n        \\n        IERC20 token = IERC20(tokenContract);\\n        uint256 totalAmount = 0;\\n        \\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            require(recipients[i] != address(0), \\\"Invalid recipient address\\\");\\n            require(amounts[i] > 0, \\\"Amount must be greater than 0\\\");\\n            \\n            totalAmount += amounts[i];\\n            token.safeTransferFrom(msg.sender, recipients[i], amounts[i]);\\n        }\\n        \\n        emit BatchTokenTransfer(tokenContract, msg.sender, totalAmount, recipients);\\n    }\\n    \\n    /**\\n     * @dev Batch transfer equal amounts of ERC20 tokens to multiple recipients\\n     * @param tokenContract Address of the ERC20 contract\\n     * @param recipients Array of recipient addresses\\n     * @param amountPerRecipient Amount of tokens to send to each recipient\\n     * @notice msg.sender must have approved this contract for (amountPerRecipient * recipients.length)\\n     */\\n    function batchTransferTokenEqual(\\n        address tokenContract,\\n        address[] calldata recipients,\\n        uint256 amountPerRecipient\\n    ) external nonReentrant {\\n        require(tokenContract != address(0), \\\"Invalid token contract address\\\");\\n        require(recipients.length > 0, \\\"Empty recipients array\\\");\\n        require(amountPerRecipient > 0, \\\"Amount must be greater than 0\\\");\\n        \\n        IERC20 token = IERC20(tokenContract);\\n        uint256 totalAmount = amountPerRecipient * recipients.length;\\n        \\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            require(recipients[i] != address(0), \\\"Invalid recipient address\\\");\\n            token.safeTransferFrom(msg.sender, recipients[i], amountPerRecipient);\\n        }\\n        \\n        emit BatchTokenTransfer(tokenContract, msg.sender, totalAmount, recipients);\\n    }\\n    \\n    /**\\n     * @dev Batch transfer multiple ERC20 tokens to a single recipient\\n     * @param tokenContracts Array of ERC20 contract addresses\\n     * @param to Recipient address\\n     * @param amounts Array of token amounts (must match tokenContracts length)\\n     * @notice msg.sender must have approved this contract for each token\\n     */\\n    function batchTransferMultipleTokens(\\n        address[] calldata tokenContracts,\\n        address to,\\n        uint256[] calldata amounts\\n    ) external nonReentrant {\\n        require(tokenContracts.length == amounts.length, \\\"Arrays length mismatch\\\");\\n        require(to != address(0), \\\"Invalid recipient address\\\");\\n        require(tokenContracts.length > 0, \\\"Empty arrays\\\");\\n        \\n        for (uint256 i = 0; i < tokenContracts.length; i++) {\\n            require(tokenContracts[i] != address(0), \\\"Invalid token contract address\\\");\\n            require(amounts[i] > 0, \\\"Amount must be greater than 0\\\");\\n            \\n            IERC20 token = IERC20(tokenContracts[i]);\\n            token.safeTransferFrom(msg.sender, to, amounts[i]);\\n        }\\n    }\\n\\n    // ============================================\\n    // COMBINED TRANSFER FUNCTIONS\\n    // ============================================\\n    \\n    /**\\n     * @dev Combined batch transfer of both NFTs and ERC20 tokens\\n     * @param nftContract Address of the ERC721 contract (set to address(0) to skip NFT transfer)\\n     * @param nftRecipients Array of NFT recipient addresses\\n     * @param tokenIds Array of NFT token IDs\\n     * @param tokenContract Address of the ERC20 contract (set to address(0) to skip token transfer)\\n     * @param tokenRecipients Array of token recipient addresses\\n     * @param tokenAmounts Array of token amounts\\n     * @notice This function allows transferring both NFTs and tokens in a single transaction\\n     */\\n    function combinedBatchTransfer(\\n        address nftContract,\\n        address[] calldata nftRecipients,\\n        uint256[] calldata tokenIds,\\n        address tokenContract,\\n        address[] calldata tokenRecipients,\\n        uint256[] calldata tokenAmounts\\n    ) external nonReentrant {\\n        // Transfer NFTs if specified\\n        if (nftContract != address(0)) {\\n            require(nftRecipients.length == tokenIds.length, \\\"NFT arrays length mismatch\\\");\\n            IERC721 nft = IERC721(nftContract);\\n            \\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\n                require(nftRecipients[i] != address(0), \\\"Invalid NFT recipient\\\");\\n                require(nft.ownerOf(tokenIds[i]) == msg.sender, \\\"Not NFT owner\\\");\\n                nft.safeTransferFrom(msg.sender, nftRecipients[i], tokenIds[i]);\\n            }\\n            \\n            if (tokenIds.length > 0) {\\n                emit BatchNFTTransfer(nftContract, msg.sender, tokenIds, nftRecipients);\\n            }\\n        }\\n        \\n        // Transfer tokens if specified\\n        if (tokenContract != address(0)) {\\n            require(tokenRecipients.length == tokenAmounts.length, \\\"Token arrays length mismatch\\\");\\n            IERC20 token = IERC20(tokenContract);\\n            uint256 totalAmount = 0;\\n            \\n            for (uint256 i = 0; i < tokenRecipients.length; i++) {\\n                require(tokenRecipients[i] != address(0), \\\"Invalid token recipient\\\");\\n                require(tokenAmounts[i] > 0, \\\"Invalid token amount\\\");\\n                token.safeTransferFrom(msg.sender, tokenRecipients[i], tokenAmounts[i]);\\n                totalAmount += tokenAmounts[i];\\n            }\\n            \\n            if (tokenRecipients.length > 0) {\\n                emit BatchTokenTransfer(tokenContract, msg.sender, totalAmount, tokenRecipients);\\n            }\\n        }\\n    }\\n\\n    // ============================================\\n    // VIEW FUNCTIONS\\n    // ============================================\\n    \\n    /**\\n     * @dev Check if user has approved this contract for a specific NFT collection\\n     * @param nftContract Address of the ERC721 contract\\n     * @param owner Address of the token owner\\n     * @return bool Whether the contract is approved\\n     */\\n    function isNFTApproved(address nftContract, address owner) external view returns (bool) {\\n        IERC721 nft = IERC721(nftContract);\\n        return nft.isApprovedForAll(owner, address(this));\\n    }\\n    \\n    /**\\n     * @dev Check if user has sufficient token allowance for this contract\\n     * @param tokenContract Address of the ERC20 contract\\n     * @param owner Address of the token owner\\n     * @param amount Required amount\\n     * @return bool Whether the allowance is sufficient\\n     */\\n    function hasTokenAllowance(\\n        address tokenContract,\\n        address owner,\\n        uint256 amount\\n    ) external view returns (bool) {\\n        IERC20 token = IERC20(tokenContract);\\n        return token.allowance(owner, address(this)) >= amount;\\n    }\\n\\n    // ============================================\\n    // ERC721 RECEIVER\\n    // ============================================\\n    \\n    /**\\n     * @dev Whenever an {IERC721} tokenId token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by operator from from, this function is called.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\\n\",\"keccak256\":\"0xbd7a8f6f5ce80b0f6986d9c17c5c97e8dbef6315374442bc8a5237c2d199aa47\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234601557611bca908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163150b7a0214611320575080631e66e2001461116857806320651d5d1461105b5780633e33c83014610f4f5780634f007f381461094d578063ad3e3a5d14610847578063bdc1bf701461064c578063db7a0a4814610547578063ec00acc7146102a45763ecd2721d1461008a575f80fd5b3461027257610098366114ce565b9093926100a3611a09565b6100ae82821461176a565b6100cf73ffffffffffffffffffffffffffffffffffffffff84161515611684565b6100da8115156117cf565b5f5b818110610108575f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b61013b73ffffffffffffffffffffffffffffffffffffffff61013361012e84868a611626565b611663565b16151561193f565b73ffffffffffffffffffffffffffffffffffffffff61015e61012e838589611626565b169061016b818589611626565b35604051907f6352211e0000000000000000000000000000000000000000000000000000000082526004820152602081602481865afa8015610267576101d0915f91610276575b5073ffffffffffffffffffffffffffffffffffffffff1633146119a4565b6101db818589611626565b3591803b15610272576040517f42842e0e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8716602482015260448101939093525f908390606490829084905af191821561026757600192610257575b50016100dc565b5f61026191611841565b5f610250565b6040513d5f823e3d90fd5b5f80fd5b610297915060203d811161029d575b61028f8183611841565b8101906118af565b5f6101b2565b503d610285565b346102725760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610272576102db6113c5565b6102e36113e8565b906044359067ffffffffffffffff82116102725761031a73ffffffffffffffffffffffffffffffffffffffff92369060040161140b565b929091610325611a09565b169061033282151561193f565b73ffffffffffffffffffffffffffffffffffffffff841693610355851515611684565b83156104e9575f5b8481106103c95750506103a17f169bb57970e51dde7f82dbdd1355c1a675ea1c9798d89454edff0a08a3fa0e1e9160405191829160208352339660208401916118db565b0390a45f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b6103d4818685611626565b35604051907f6352211e0000000000000000000000000000000000000000000000000000000082526004820152602081602481885afa801561026757610438915f916104cb575073ffffffffffffffffffffffffffffffffffffffff1633146119a4565b610443818685611626565b3590843b15610272576040517f42842e0e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015260448101929092525f8260648183895af1918215610267576001926104bb575b500161035d565b5f6104c591611841565b876104b4565b6104e3915060203d811161029d5761028f8183611841565b886101b2565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f456d70747920746f6b656e2061727261790000000000000000000000000000006044820152fd5b3461027257610555366114ce565b9161055e611a09565b61056983851461176a565b61058a73ffffffffffffffffffffffffffffffffffffffff82161515611684565b6105958415156117cf565b5f5b8481106105c3575f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b806105f473ffffffffffffffffffffffffffffffffffffffff6105ec61012e6001958a8c611626565b16151561155c565b61060a610602828787611626565b3515156115c1565b61064673ffffffffffffffffffffffffffffffffffffffff61063061012e848a8c611626565b168461063d848989611626565b35913390611a7d565b01610597565b346102725773ffffffffffffffffffffffffffffffffffffffff61066f3661143c565b919361067c959195611a09565b169261068984151561193f565b61069482821461176a565b61069f8115156117cf565b5f5b8281106107065750906106de7f770d19e9db4539c476b14ed81ffcca41eb2f0ff77ea58db90ae915c29464f5149392604051938493339885611918565b0390a35f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b61073473ffffffffffffffffffffffffffffffffffffffff61072c61012e848689611626565b161515611684565b61073f818488611626565b35604051907f6352211e0000000000000000000000000000000000000000000000000000000082526004820152602081602481895afa8015610267576107a3915f916104cb575073ffffffffffffffffffffffffffffffffffffffff1633146119a4565b6107b161012e828487611626565b906107bd818589611626565b3591863b15610272576040517f42842e0e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff91909116602482015260448101929092525f82606481838a5af191821561026757600192610837575b50016106a1565b5f61084191611841565b87610830565b346102725760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102725773ffffffffffffffffffffffffffffffffffffffff60206108f86108986113c5565b6108a06113e8565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015230602482015293849283919082906044820190565b0392165afa8015610267575f9061091a575b6020906040519060443511158152f35b506020813d602011610945575b8161093460209383611841565b81010312610272576020905161090a565b3d9150610927565b346102725760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610272576109846113c5565b60243567ffffffffffffffff8111610272576109a490369060040161140b565b60449291923567ffffffffffffffff8111610272576109c790369060040161140b565b90926064359373ffffffffffffffffffffffffffffffffffffffff85168095036102725760843567ffffffffffffffff811161027257610a0b90369060040161140b565b93909460a4359767ffffffffffffffff891161027257610a4473ffffffffffffffffffffffffffffffffffffffff99369060040161140b565b999095610a4f611a09565b169283610c86575b505050505083610a87575b5f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b848203610c2857935f945f915b838310610ae95750505080610aaa575b80610a62565b7fb182cacc56ef8b8a4b3ad014ef0c931ec9a552ed21733951dcd68d35e243464791610add604051928392339784611750565b0390a380808080610aa4565b90919573ffffffffffffffffffffffffffffffffffffffff610b0f61012e898789611626565b1615610bca57610b20878385611626565b3515610b6c57610b63600191610b51610b3d61012e8b898b611626565b610b488b8789611626565b3590338b611a7d565b610b5c898587611626565b3590611834565b96019190610a94565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420746f6b656e20616d6f756e740000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c696420746f6b656e20726563697069656e740000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f546f6b656e20617272617973206c656e677468206d69736d61746368000000006044820152fd5b808303610ef1575f5b818110610cdd57508015610a5757610cd07f770d19e9db4539c476b14ed81ffcca41eb2f0ff77ea58db90ae915c29464f51493604051938493339885611918565b0390a38580808080610a57565b73ffffffffffffffffffffffffffffffffffffffff610d0061012e838787611626565b1615610e9357610d11818388611626565b35604051907f6352211e0000000000000000000000000000000000000000000000000000000082526004820152602081602481895afa908115610267575f91610e75575b5073ffffffffffffffffffffffffffffffffffffffff33911603610e1757610d8161012e828686611626565b90610d8d818489611626565b3591863b15610272576040517f42842e0e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff91909116602482015260448101929092525f82606481838a5af191821561026757600192610e07575b5001610c8f565b5f610e1191611841565b8c610e00565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f74204e4654206f776e6572000000000000000000000000000000000000006044820152fd5b610e8d915060203d811161029d5761028f8183611841565b8c610d55565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c6964204e465420726563697069656e7400000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e465420617272617973206c656e677468206d69736d617463680000000000006044820152fd5b346102725760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102725773ffffffffffffffffffffffffffffffffffffffff6020611000610fa06113c5565b610fa86113e8565b6040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015230602482015293849283919082906044820190565b0392165afa8015610267575f9061101f575b6020906040519015158152f35b506020813d602011611053575b8161103960209383611841565b810103126102725751801515810361027257602090611012565b3d915061102c565b346102725773ffffffffffffffffffffffffffffffffffffffff61107e3661143c565b94909361108c939293611a09565b169261109984151561155c565b6110a485841461176a565b6110af8315156117cf565b5f945f915b8483106110f257505050907fb182cacc56ef8b8a4b3ad014ef0c931ec9a552ed21733951dcd68d35e2434647916106de604051928392339784611750565b90919561113a60019161112173ffffffffffffffffffffffffffffffffffffffff61072c61012e8c8b8b611626565b61112f6106028a8787611626565b610b5c898686611626565b9661116061114c61012e838989611626565b611157838787611626565b3590338a611a7d565b0191906110b4565b346102725760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102725761119f6113c5565b60243567ffffffffffffffff8111610272576111bf90369060040161140b565b73ffffffffffffffffffffffffffffffffffffffff604435936111e0611a09565b16906111ed82151561155c565b80156112c25783159261120084156115c1565b8185029385850483141715611295575f5b82811061124d5750907fb182cacc56ef8b8a4b3ad014ef0c931ec9a552ed21733951dcd68d35e2434647916106de604051928392339784611750565b8061127673ffffffffffffffffffffffffffffffffffffffff61072c61012e6001958888611626565b61128f8761128861012e848888611626565b3388611a7d565b01611211565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f456d70747920726563697069656e7473206172726179000000000000000000006044820152fd5b346102725760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610272576113576113c5565b506113606113e8565b5060643567ffffffffffffffff8111610272573660238201121561027257806004013567ffffffffffffffff8111610272573691016024011161027257807f150b7a020000000000000000000000000000000000000000000000000000000060209252f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361027257565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361027257565b9181601f840112156102725782359167ffffffffffffffff8311610272576020808501948460051b01011161027257565b9060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126102725760043573ffffffffffffffffffffffffffffffffffffffff81168103610272579160243567ffffffffffffffff811161027257816114a79160040161140b565b929092916044359067ffffffffffffffff8211610272576114ca9160040161140b565b9091565b9060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126102725760043567ffffffffffffffff811161027257826115189160040161140b565b9290929160243573ffffffffffffffffffffffffffffffffffffffff8116810361027257916044359067ffffffffffffffff8211610272576114ca9160040161140b565b1561156357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e76616c696420746f6b656e20636f6e7472616374206164647265737300006044820152fd5b156115c857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152fd5b91908110156116365760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff811681036102725790565b1561168b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420726563697069656e742061646472657373000000000000006044820152fd5b916020908281520191905f905b8082106117035750505090565b90919283359073ffffffffffffffffffffffffffffffffffffffff82168203610272576020809173ffffffffffffffffffffffffffffffffffffffff6001941681520194019201906116f6565b6040906117679492815281602082015201916116e9565b90565b1561177157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f417272617973206c656e677468206d69736d61746368000000000000000000006044820152fd5b156117d657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f456d7074792061727261797300000000000000000000000000000000000000006044820152fd5b9190820180921161129557565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761188257604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90816020910312610272575173ffffffffffffffffffffffffffffffffffffffff811681036102725790565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116102725760209260051b809284830137010190565b92906119319061176795936040865260408601916118db565b9260208185039101526116e9565b1561194657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f496e76616c6964204e465420636f6e74726163742061646472657373000000006044820152fd5b156119ab57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420746f6b656e206f776e657200000000000000000000000000000000006044820152fd5b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005c611a555760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d565b7f3ee5aeb5000000000000000000000000000000000000000000000000000000005f5260045ffd5b92905f91611b15602094611ae9604051938492888401967f23b872dd0000000000000000000000000000000000000000000000000000000088526024850173ffffffffffffffffffffffffffffffffffffffff6040929594938160608401971683521660208201520152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611841565b519082855af115610267575f513d611b8b575073ffffffffffffffffffffffffffffffffffffffff81163b155b611b495750565b73ffffffffffffffffffffffffffffffffffffffff907f5274afe7000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b60011415611b4256fea26469706673582212205d50f8d404113bb6c4d49c0217ced27d0e803e831a2d2baf30a89cf7ddccc16d64736f6c634300081c0033",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f3560e01c908163150b7a0214611320575080631e66e2001461116857806320651d5d1461105b5780633e33c83014610f4f5780634f007f381461094d578063ad3e3a5d14610847578063bdc1bf701461064c578063db7a0a4814610547578063ec00acc7146102a45763ecd2721d1461008a575f80fd5b3461027257610098366114ce565b9093926100a3611a09565b6100ae82821461176a565b6100cf73ffffffffffffffffffffffffffffffffffffffff84161515611684565b6100da8115156117cf565b5f5b818110610108575f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b61013b73ffffffffffffffffffffffffffffffffffffffff61013361012e84868a611626565b611663565b16151561193f565b73ffffffffffffffffffffffffffffffffffffffff61015e61012e838589611626565b169061016b818589611626565b35604051907f6352211e0000000000000000000000000000000000000000000000000000000082526004820152602081602481865afa8015610267576101d0915f91610276575b5073ffffffffffffffffffffffffffffffffffffffff1633146119a4565b6101db818589611626565b3591803b15610272576040517f42842e0e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8716602482015260448101939093525f908390606490829084905af191821561026757600192610257575b50016100dc565b5f61026191611841565b5f610250565b6040513d5f823e3d90fd5b5f80fd5b610297915060203d811161029d575b61028f8183611841565b8101906118af565b5f6101b2565b503d610285565b346102725760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610272576102db6113c5565b6102e36113e8565b906044359067ffffffffffffffff82116102725761031a73ffffffffffffffffffffffffffffffffffffffff92369060040161140b565b929091610325611a09565b169061033282151561193f565b73ffffffffffffffffffffffffffffffffffffffff841693610355851515611684565b83156104e9575f5b8481106103c95750506103a17f169bb57970e51dde7f82dbdd1355c1a675ea1c9798d89454edff0a08a3fa0e1e9160405191829160208352339660208401916118db565b0390a45f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b6103d4818685611626565b35604051907f6352211e0000000000000000000000000000000000000000000000000000000082526004820152602081602481885afa801561026757610438915f916104cb575073ffffffffffffffffffffffffffffffffffffffff1633146119a4565b610443818685611626565b3590843b15610272576040517f42842e0e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015260448101929092525f8260648183895af1918215610267576001926104bb575b500161035d565b5f6104c591611841565b876104b4565b6104e3915060203d811161029d5761028f8183611841565b886101b2565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f456d70747920746f6b656e2061727261790000000000000000000000000000006044820152fd5b3461027257610555366114ce565b9161055e611a09565b61056983851461176a565b61058a73ffffffffffffffffffffffffffffffffffffffff82161515611684565b6105958415156117cf565b5f5b8481106105c3575f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b806105f473ffffffffffffffffffffffffffffffffffffffff6105ec61012e6001958a8c611626565b16151561155c565b61060a610602828787611626565b3515156115c1565b61064673ffffffffffffffffffffffffffffffffffffffff61063061012e848a8c611626565b168461063d848989611626565b35913390611a7d565b01610597565b346102725773ffffffffffffffffffffffffffffffffffffffff61066f3661143c565b919361067c959195611a09565b169261068984151561193f565b61069482821461176a565b61069f8115156117cf565b5f5b8281106107065750906106de7f770d19e9db4539c476b14ed81ffcca41eb2f0ff77ea58db90ae915c29464f5149392604051938493339885611918565b0390a35f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b61073473ffffffffffffffffffffffffffffffffffffffff61072c61012e848689611626565b161515611684565b61073f818488611626565b35604051907f6352211e0000000000000000000000000000000000000000000000000000000082526004820152602081602481895afa8015610267576107a3915f916104cb575073ffffffffffffffffffffffffffffffffffffffff1633146119a4565b6107b161012e828487611626565b906107bd818589611626565b3591863b15610272576040517f42842e0e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff91909116602482015260448101929092525f82606481838a5af191821561026757600192610837575b50016106a1565b5f61084191611841565b87610830565b346102725760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102725773ffffffffffffffffffffffffffffffffffffffff60206108f86108986113c5565b6108a06113e8565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015230602482015293849283919082906044820190565b0392165afa8015610267575f9061091a575b6020906040519060443511158152f35b506020813d602011610945575b8161093460209383611841565b81010312610272576020905161090a565b3d9150610927565b346102725760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610272576109846113c5565b60243567ffffffffffffffff8111610272576109a490369060040161140b565b60449291923567ffffffffffffffff8111610272576109c790369060040161140b565b90926064359373ffffffffffffffffffffffffffffffffffffffff85168095036102725760843567ffffffffffffffff811161027257610a0b90369060040161140b565b93909460a4359767ffffffffffffffff891161027257610a4473ffffffffffffffffffffffffffffffffffffffff99369060040161140b565b999095610a4f611a09565b169283610c86575b505050505083610a87575b5f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d005b848203610c2857935f945f915b838310610ae95750505080610aaa575b80610a62565b7fb182cacc56ef8b8a4b3ad014ef0c931ec9a552ed21733951dcd68d35e243464791610add604051928392339784611750565b0390a380808080610aa4565b90919573ffffffffffffffffffffffffffffffffffffffff610b0f61012e898789611626565b1615610bca57610b20878385611626565b3515610b6c57610b63600191610b51610b3d61012e8b898b611626565b610b488b8789611626565b3590338b611a7d565b610b5c898587611626565b3590611834565b96019190610a94565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420746f6b656e20616d6f756e740000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c696420746f6b656e20726563697069656e740000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f546f6b656e20617272617973206c656e677468206d69736d61746368000000006044820152fd5b808303610ef1575f5b818110610cdd57508015610a5757610cd07f770d19e9db4539c476b14ed81ffcca41eb2f0ff77ea58db90ae915c29464f51493604051938493339885611918565b0390a38580808080610a57565b73ffffffffffffffffffffffffffffffffffffffff610d0061012e838787611626565b1615610e9357610d11818388611626565b35604051907f6352211e0000000000000000000000000000000000000000000000000000000082526004820152602081602481895afa908115610267575f91610e75575b5073ffffffffffffffffffffffffffffffffffffffff33911603610e1757610d8161012e828686611626565b90610d8d818489611626565b3591863b15610272576040517f42842e0e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff91909116602482015260448101929092525f82606481838a5af191821561026757600192610e07575b5001610c8f565b5f610e1191611841565b8c610e00565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f74204e4654206f776e6572000000000000000000000000000000000000006044820152fd5b610e8d915060203d811161029d5761028f8183611841565b8c610d55565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c6964204e465420726563697069656e7400000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e465420617272617973206c656e677468206d69736d617463680000000000006044820152fd5b346102725760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102725773ffffffffffffffffffffffffffffffffffffffff6020611000610fa06113c5565b610fa86113e8565b6040517fe985e9c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015230602482015293849283919082906044820190565b0392165afa8015610267575f9061101f575b6020906040519015158152f35b506020813d602011611053575b8161103960209383611841565b810103126102725751801515810361027257602090611012565b3d915061102c565b346102725773ffffffffffffffffffffffffffffffffffffffff61107e3661143c565b94909361108c939293611a09565b169261109984151561155c565b6110a485841461176a565b6110af8315156117cf565b5f945f915b8483106110f257505050907fb182cacc56ef8b8a4b3ad014ef0c931ec9a552ed21733951dcd68d35e2434647916106de604051928392339784611750565b90919561113a60019161112173ffffffffffffffffffffffffffffffffffffffff61072c61012e8c8b8b611626565b61112f6106028a8787611626565b610b5c898686611626565b9661116061114c61012e838989611626565b611157838787611626565b3590338a611a7d565b0191906110b4565b346102725760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102725761119f6113c5565b60243567ffffffffffffffff8111610272576111bf90369060040161140b565b73ffffffffffffffffffffffffffffffffffffffff604435936111e0611a09565b16906111ed82151561155c565b80156112c25783159261120084156115c1565b8185029385850483141715611295575f5b82811061124d5750907fb182cacc56ef8b8a4b3ad014ef0c931ec9a552ed21733951dcd68d35e2434647916106de604051928392339784611750565b8061127673ffffffffffffffffffffffffffffffffffffffff61072c61012e6001958888611626565b61128f8761128861012e848888611626565b3388611a7d565b01611211565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f456d70747920726563697069656e7473206172726179000000000000000000006044820152fd5b346102725760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610272576113576113c5565b506113606113e8565b5060643567ffffffffffffffff8111610272573660238201121561027257806004013567ffffffffffffffff8111610272573691016024011161027257807f150b7a020000000000000000000000000000000000000000000000000000000060209252f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361027257565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361027257565b9181601f840112156102725782359167ffffffffffffffff8311610272576020808501948460051b01011161027257565b9060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126102725760043573ffffffffffffffffffffffffffffffffffffffff81168103610272579160243567ffffffffffffffff811161027257816114a79160040161140b565b929092916044359067ffffffffffffffff8211610272576114ca9160040161140b565b9091565b9060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126102725760043567ffffffffffffffff811161027257826115189160040161140b565b9290929160243573ffffffffffffffffffffffffffffffffffffffff8116810361027257916044359067ffffffffffffffff8211610272576114ca9160040161140b565b1561156357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e76616c696420746f6b656e20636f6e7472616374206164647265737300006044820152fd5b156115c857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152fd5b91908110156116365760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff811681036102725790565b1561168b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420726563697069656e742061646472657373000000000000006044820152fd5b916020908281520191905f905b8082106117035750505090565b90919283359073ffffffffffffffffffffffffffffffffffffffff82168203610272576020809173ffffffffffffffffffffffffffffffffffffffff6001941681520194019201906116f6565b6040906117679492815281602082015201916116e9565b90565b1561177157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f417272617973206c656e677468206d69736d61746368000000000000000000006044820152fd5b156117d657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f456d7074792061727261797300000000000000000000000000000000000000006044820152fd5b9190820180921161129557565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761188257604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90816020910312610272575173ffffffffffffffffffffffffffffffffffffffff811681036102725790565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116102725760209260051b809284830137010190565b92906119319061176795936040865260408601916118db565b9260208185039101526116e9565b1561194657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f496e76616c6964204e465420636f6e74726163742061646472657373000000006044820152fd5b156119ab57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420746f6b656e206f776e657200000000000000000000000000000000006044820152fd5b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005c611a555760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d565b7f3ee5aeb5000000000000000000000000000000000000000000000000000000005f5260045ffd5b92905f91611b15602094611ae9604051938492888401967f23b872dd0000000000000000000000000000000000000000000000000000000088526024850173ffffffffffffffffffffffffffffffffffffffff6040929594938160608401971683521660208201520152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611841565b519082855af115610267575f513d611b8b575073ffffffffffffffffffffffffffffffffffffffff81163b155b611b495750565b73ffffffffffffffffffffffffffffffffffffffff907f5274afe7000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b60011415611b4256fea26469706673582212205d50f8d404113bb6c4d49c0217ced27d0e803e831a2d2baf30a89cf7ddccc16d64736f6c634300081c0033",
  "devdoc": {
    "details": "Batch transfer contract for NFTs (ERC721) and Fungible Tokens (ERC20)",
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "batchTransferMultipleNFTCollections(address[],address,uint256[])": {
        "details": "Transfer multiple NFTs from different collections to a single recipient",
        "params": {
          "nftContracts": "Array of ERC721 contract addresses",
          "to": "Recipient address",
          "tokenIds": "Array of token IDs (must match nftContracts length)"
        }
      },
      "batchTransferMultipleTokens(address[],address,uint256[])": {
        "details": "Batch transfer multiple ERC20 tokens to a single recipient",
        "params": {
          "amounts": "Array of token amounts (must match tokenContracts length)",
          "to": "Recipient address",
          "tokenContracts": "Array of ERC20 contract addresses"
        }
      },
      "batchTransferNFT(address,address[],uint256[])": {
        "details": "Batch transfer NFTs from msg.sender to multiple recipients",
        "params": {
          "nftContract": "Address of the ERC721 contract",
          "recipients": "Array of recipient addresses (must match tokenIds length)",
          "tokenIds": "Array of token IDs to transfer"
        }
      },
      "batchTransferNFTToSingle(address,address,uint256[])": {
        "details": "Transfer multiple NFTs from msg.sender to a single recipient",
        "params": {
          "nftContract": "Address of the ERC721 contract",
          "to": "Recipient address",
          "tokenIds": "Array of token IDs to transfer"
        }
      },
      "batchTransferToken(address,address[],uint256[])": {
        "details": "Batch transfer ERC20 tokens from msg.sender to multiple recipients",
        "params": {
          "amounts": "Array of token amounts to transfer (must match recipients length)",
          "recipients": "Array of recipient addresses",
          "tokenContract": "Address of the ERC20 contract"
        }
      },
      "batchTransferTokenEqual(address,address[],uint256)": {
        "details": "Batch transfer equal amounts of ERC20 tokens to multiple recipients",
        "params": {
          "amountPerRecipient": "Amount of tokens to send to each recipient",
          "recipients": "Array of recipient addresses",
          "tokenContract": "Address of the ERC20 contract"
        }
      },
      "combinedBatchTransfer(address,address[],uint256[],address,address[],uint256[])": {
        "details": "Combined batch transfer of both NFTs and ERC20 tokens",
        "params": {
          "nftContract": "Address of the ERC721 contract (set to address(0) to skip NFT transfer)",
          "nftRecipients": "Array of NFT recipient addresses",
          "tokenAmounts": "Array of token amounts",
          "tokenContract": "Address of the ERC20 contract (set to address(0) to skip token transfer)",
          "tokenIds": "Array of NFT token IDs",
          "tokenRecipients": "Array of token recipient addresses"
        }
      },
      "hasTokenAllowance(address,address,uint256)": {
        "details": "Check if user has sufficient token allowance for this contract",
        "params": {
          "amount": "Required amount",
          "owner": "Address of the token owner",
          "tokenContract": "Address of the ERC20 contract"
        },
        "returns": {
          "_0": "bool Whether the allowance is sufficient"
        }
      },
      "isNFTApproved(address,address)": {
        "details": "Check if user has approved this contract for a specific NFT collection",
        "params": {
          "nftContract": "Address of the ERC721 contract",
          "owner": "Address of the token owner"
        },
        "returns": {
          "_0": "bool Whether the contract is approved"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} tokenId token is transferred to this contract via {IERC721-safeTransferFrom} by operator from from, this function is called."
      }
    },
    "title": "BatchTransfer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchTransferMultipleNFTCollections(address[],address,uint256[])": {
        "notice": "msg.sender must own all tokenIds and have approved this contract for each collection"
      },
      "batchTransferMultipleTokens(address[],address,uint256[])": {
        "notice": "msg.sender must have approved this contract for each token"
      },
      "batchTransferNFT(address,address[],uint256[])": {
        "notice": "msg.sender must own all tokenIds and have approved this contract"
      },
      "batchTransferNFTToSingle(address,address,uint256[])": {
        "notice": "msg.sender must own all tokenIds and have approved this contract"
      },
      "batchTransferToken(address,address[],uint256[])": {
        "notice": "msg.sender must have approved this contract for the total amount"
      },
      "batchTransferTokenEqual(address,address[],uint256)": {
        "notice": "msg.sender must have approved this contract for (amountPerRecipient * recipients.length)"
      },
      "combinedBatchTransfer(address,address[],uint256[],address,address[],uint256[])": {
        "notice": "This function allows transferring both NFTs and tokens in a single transaction"
      }
    },
    "notice": "This contract allows users to batch transfer NFT and FT tokens efficiently",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}